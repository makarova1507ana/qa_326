# # ------------------------ Практика ------------------------------ #
# # вычисление суммы арифметической прогрессии
# # пользователь опеределяет d - разница между соседними элементами
# # и оперделеяет первый элемент прогресси a1
# # и номер последнего элемента n
# # Необходимо написать все элементы
# # и затем посчитать сумму всех элементов арифметической прогрессии
#
# a1 = 2
# d = 2
# n = 5 # будут формироваться 2,4,6,8 , 10
# an = (a1+d*(n-1))+1
# for i in range(a1, an, d):
#     print(i, end=", ")
#
# s = ((a1+an)/2)* n
# print(f"\ns={s}")




# # ------------------------ Наборы значений ------------------------------ #
# # массив == тип данных (размер нельзя менять, строго одного типа) - набор значений
#


# # тип данных в пайтоне
# #     * list - список
# #     * tuple - кортеж
# #     * set -  множества
# #     * dictionary - словарь


# # list -  список  - пример [1, "4 арбуза",  [2, 3]]
# #   * произвольного размера
# #   * могут быть разного типа
# # удобство в том, что все в одном месте





#---------------------------- list ------------------------------------#
# l = [1, "4 арбуза",  [2, 3]]
# print(type(l))
#
# Что можно делать со списком ?
#   * хранить
#   * просматривать по отдельности
#   * изменять элементы (редактировать)
#   * удалять элементы
#   * добавлять новые элементы


# l_chocalates = ["Шоколад обычный", "Шоколад горький", "Шоколад молочный", "Шоколадный заяц горький" ]
#
# print(l_chocalates)
#
# # обращение к элементам списка
# index = 0
# print(f"l_chocalates[0] = {l_chocalates[index]}") #index - номер элемента списка, начинается 0
# print(f"l_chocalates[3] = {l_chocalates[3]}")
#
# # несуществующие индексы в КОНКРЕТНОМ  списке
# # print(l_chocalates[4]) # IndexError: list index out of range
# # print(f"l_chocalates[-5] = {l_chocalates[-5]}") # IndexError: list index out of range
#
# # отричательные индексы
# print(f"l_chocalates[-1] = {l_chocalates[-1]}") # отричательный индекс -1 - последний
# print(f"l_chocalates[-2] = {l_chocalates[-2]}") # отричательный индекс -2 - следующий после последнего
#
#

# # Показать доступные товары и их порядковые номера (начиная с 1)
# l_chocolates = ["Шоколад обычный", "Шоколад горький", "Шоколад молочный", "Шоколадный заяц горький" ]
#
# for chocolate in l_chocolates:
#     print(chocolate)
#
# print("\n*****************************************\n")
# size_of_list = len(l_chocolates) # len(smth_list) - вычисляет фактическую длину списка
# for i in range(size_of_list): # range(size_of_list) - сформирует диапозон идексов
#     print(i+1, f"l_chocolates[{i}] = {l_chocolates[i]}")
#
# print("\n*****************************************\n")
# #enumerate(l_chocolates) # index, chocolate
#
# for index, chocolate in enumerate(l_chocolates): # range(size_of_list) - сформирует диапозон идексов
#     print(index+1, f"chocolate= {chocolate}  | index= {index}")


# #--------------------------------Задача-----------------------------------#
# # дан список [2,3,4,5,6,8]
# # распечатать только элементы с четным индексом
# numbers =  [2,3,4,5,6,8]
# size = len (numbers)
#
# for index in range(size):
#     if index % 2 == 0:
#         print(index+1, f"numbers[{index}] = {numbers[index]}")




# # #--------------------------------Задача-----------------------------------#
# # дан список [1, 78, 3, 9, 77, 99, 3]
# # распечатать элементы, которые делятся на 3 без остатка
# # 1 перебрать все элементы
# #     1.1  Анализ элемента
#
# l = [1, 78, 3, 9, 77, 99, 3]
#
# for element in l:
#     if element % 3 == 0:
#         print(element)



# #   * изменение элеменов (редактирование)
# l = [1, 5, 2]
# print(l)
# l[1] = '*'
# print(l)


# # #--------------------------------Задача-----------------------------------#
# # дан список [1, 78, 3, 9, 77, 99, 3]
# # заменить элементы, которые делятся на 3 без остатка,
# # на '*'
#
#
# l = [1, 78, 3, 9, 77, 99, 3]
# print(l)
# for index, element in enumerate(l):
#     if element % 3 == 0:
#         l[index] = '*'
#         print(f"l[{index}] = {element}")
# print(l)




# #   * добавлeние новых элементов
# # smth_list.append(smth_variable) # в этот список "smth_list" передаем  это smth_variable
# # smth_list.append() - append - метод, потому что нужен обязательно что-то
#
# l = []
#
# print(l)
# l.append(1)
# print(l)
#
# l.append(55) # добавляет в конец
# print(l)
#
# l.insert(1, 444)# добавляет в туда, куда сказали, но логику списка не поломает
# print(l)


# # # #--------------------------------Задача-----------------------------------#
# # дан размер списка
# # заполнить этот список случайными числами (от -100 до 100)
#
# from random import randint
# numbers = []
# n = 10
# for i in range(n):
#     numbers.append(randint(-100, 100))
# print(numbers)


# #--------------------------------Задача--------------------------#
# # дан список элементов
# # создать новый список,
# # который будет содеражать только четные элементы
#
# from random import*
# l = []
# randint(-100, 100)
# n = 10
# for i in range(n):
#     l.append(randint(-100, 100))
#
# new_list = []
# for i, el in enumerate(l):
#     if el % 2 == 0:
#         new_list.append(el)
# print(new_list)

# #--------------------------------Задача-------------------------------------#
# # дана длина списка
# # заполнить четные места (индекс) '*', а нечетные '.'
# l = []
# length = 5
# for i in range(length):
#     if i % 2 == 0 :
#         l.append('*')
#     else:
#         l.append('.')

# # #--------------------------------Задача-------------------------------------#
# # # дана  список
# #  надо  вывести  пары соседних элементов
#
# # l = [1, 5, 7, 9]
# # i = [0, 1, 2, 3]
# # l[i] = 1, l[i+1] = 5
# # l[i] = 5, l[i+1] = 7
# # l[i] = 7, l[i+1] = 9
#
# l = [1, 5, 7, 9]
#
# for i in range(len(l) - 1):
#     print(l[i], l[i+1])



# #--------------------------------Задача-------------------------------------#
# # дан  список
# # запрщено использовать sort и max, преобзовывать список в другие типы тоже нельзя
# # найти максимальный элементв списке
#
# l = [1, 5, 8, -5, 9, -3]
# if !l: # если список НЕ пустой
#   max_el = l[0]
# for element in l:
#     if element > max_el:
#         max_el = element
# print(max_el)



# #   * удалeние элементы
# l = [1, 5, 8, -5, 9, -3, 5]
# # print(l)
# # l.remove(5) # (что хотим удалить) удалить только первую по списку
# print(l)
#
# #удалить все 5
# while l.count(5):
#     l.remove(5)
#
# print(l)