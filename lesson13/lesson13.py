# d = {1: ['page1', 'page2'], 2: 'Home'}
# for key in d:
#     if type(d[key]) == list:
#         for page in d[key]:
#             for s in page:
#                 print(s)
#             print(page)
# # print(d[1][1])

# #--------регулярные выражения---------#
# # шаблон (маска) - подстроки
# # "Hello, cat, dog, cat again!" - cat
# # email - name_box@box.ru
# # @name_boxbox.ru
# # name_box$$${}<>@box.ru
# # [А-я] - для поиска букв Кирилицы
# # \w{1,}@\w{1,}\.\w{1,}
#
# import re
# test_string = """
# # name_box@box.ru
# n@b.r
# makarova1507nastya@gmail.com
# # @name_boxbox.ru
# # name_box$$${}<>@box.ru
# #name_box@b
# а@
# """
# reg_ex = r"\w{1,}@\w{1,}\.\w{1,}"  #  r"" -экранирование всех элементов в строке
# result = re.findall(reg_ex, test_string)
# print(result)


# # ----------------Задание-------------------- #
# # найти все даты в строке и отобразить пользователю в таком формате
# # 1 - 10.10.2000
# # 2 - 14.13.2000
# #  и т.д.
# #  валидация месяца и дня проверяться  не будет
# # 99.99.9999 - шаблон
# import re
# test_string = "99.99.9999 9.9.9999 14.13.2000 99.99.99 10.10.2000"
# reg_ex = r"(\d{2}\.\d{2}\.\d{4})"
# dates = re.findall(reg_ex, test_string)
# i = 0
# for date in dates:
#     i += 1
#     print(f"{i} - {date} ")


# # ---------------Примеры использования----------------- #
# import re #импортируем модуль
#
# s = "ёжик. Эти события произошли в 2021 году. 2022 год был особенный! в нем было 20232024 шт необычных вещей. Правда?" #тестовая строка
# reg = '\d{4}' #наше регулярное выражени
# list_s = re.findall(reg, s) #находим все совпадения по шамблону рег. выражений
# print(list_s)
#
# print(re.search(reg, s))# находит первое совпадения по шамблону  с развернутым анализом
# # print(re.search(reg, s).span())# возвращает номера занимаемого первогосовпадения
# # print(re.search(reg, s).start())# находит начальный номер первого совпадения по шамблону
# # print(re.search(reg, s).end())# находит конечный номер первого совпадения по шамблону
# print(re.search(reg, s).group())# находит первое совпадения по шамблону

# reg = '(\.|\!|\?)'# либо '.'  либо '!' либо '?'
# print(re.split(reg, s))#разделение строки по предложениям
# reg = r'\.'# r - позволяет игнорировать дополнительного экранирование спец сиволов в строке
# print(re.sub(reg, "!", s, 1))# поиск и замена по шаблону (последняя цифра необязательна, указывает сколько должно быть замен)
# reg = r'[А-яё]'#необходимо указывать явно букву "ё"
# print(re.findall(reg, s))




# поиск в строке года из 3 или 4 цифр
# \d{3,4}


# валидация номера телефона
# валидные значение
# + - может встречаться, а может нет
# код страны 1-3 кол-во символа (цифра)
# номер телефона только цифры в количестве 10
# +7-111-111-11-11
# +7 111 111 11 11
# +71111111111
# 7-111-111-11-11

#\+{0,1} - есть + или нет
# \d{1,3}[- ]{0,} - код страны и разделитель после кода
# ниже указан анализ номера телефона
# \d{3}[- ]{0,}\d{3}[- ]{0,}\d{2}[- ]{0,}\d{2}

# решение
#\+{0,1}\d{1,3}[- ]{0,}(\d{3}[- ]{0,}){2}(\d{2}[- ]{0,}){2}







# ------------------- Функции ---------------------- #
# фукнция - СОХРАНЕННЫЙ набор действий выполняющий какую-то конкретную задачу
# def (define - объявлять) название_функции ()
#    инструкции (ваш код)
#
# from turtle import*
# from time import sleep
# #import turtle as t
# #t.forward(100)
#
# # рисование треугольника
# def draw_triangle():
#     for i in range(3):
#         forward(100)
#         left(120)
#

# -----------А вот так надо----------------#
# #Вызов функции
# right(180)
# draw_triangle()
#
# left(60)
# draw_triangle()
#
#
# left(60)
# draw_triangle()
#
# right(120+90)
# draw_triangle()
# sleep(5)


# ВОТ ТАК НЕ НАДО ДЕЛАТЬ
# right(180)
# forward(100)
# left(120)
# forward(100)
# left(120)
# forward(100)
#
# right(180)
# forward(100)
# left(120)
# forward(100)
# left(120)
# forward(100)
#
# right(180)
# forward(100)
# left(120)
# forward(100)
# left(120)
# forward(100)
# sleep(5)
#
